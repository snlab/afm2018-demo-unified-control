<template>
    <k-accordion>
      <!-- <h3>Input your Trident program:</h3> -->
      <textarea cols='30' rows='30' class="editor" v-model="text"></textarea>
      <button v-on:click='submit'>Submit</button>
<!--       <k-accordion-item title="Test" v-if="this.metadata.id">
        <k-switch-radar :dpid="metadata.id" :showGrid="true" :showAxis="true" :showLabels="true" :showLegend="false"></k-switch-radar>
      </k-accordion-item> -->
<!--       <k-accordion-item title="Basic Details">
          <k-property-panel>
              <k-property-panel-item :name="key" :value="value" :key="key" v-if="content" v-for="(value, key) in this.metadata"></k-property-panel-item>
          </k-property-panel>
      </k-accordion-item>
      <k-accordion-item title="Custom Properties" v-if="this.custom_properties">
          <k-property-panel>
              <k-property-panel-item :name="key" :value="value" v-if="content" :key="key" v-for="(value, key) in this.custom_properties"></k-property-panel-item>
          </k-property-panel>
      </k-accordion-item>
      <k-accordion-item title="Interfaces" v-if="this.interfaces">
         <k-interface :interface_id="interface.id" :name="interface.name" :port_number="interface.port_number" :mac="interface.mac" :speed="interface.speed" :key="interface.name" v-for="interface in this.interfaces"></k-interface>
      </k-accordion-item>
      <k-accordion-item title="Flows" v-if="this.flows">
         <k-flow :content="flow" :key="flow.id" v-for="flow in this.flows"></k-flow>
      </k-accordion-item> -->
    </k-accordion>
</template>

<script>
 module.exports = {
   props: ["content"],
   data () {
      return {
        display: true,
        text: ""
      }
     // return {
     //   display: true,
     //   metadata: {'id': '',
     //              'name': '',
     //              'dpid': '',
     //              'connection': '',
     //              'ofp_version': '',
     //              'manufacturer': '',
     //              'serial': '',
     //              'hardware': '',
     //              'software': ''},
     //   interfaces: [],
     //   custom_properties: {},
     //   flows: [],
     // }
   },
   methods: {
     submit() {
       console.log(this.text);
       $.post("/api/snlab/trident_server/v1/submit",this.text, function(data, textStatus, jqXHR){
        console.log(data)
        alert(textStatus)
       })
     }
     // update_switch_content () {
     //   console.log(this)
     //   if(this.content === undefined) return
     //   this.interfaces = this.content.interfaces
     //   this.custom_properties = this.content.custom_properties
     //   var self = this
     //   Object.keys(this.metadata).forEach(function (key) {
     //     let value = self.content[key]
     //     self.metadata[key] = String(value)
     //   });
     //   this.get_flows()
     // },
     // get_flows() {
     //   var dpid = this.metadata.dpid
     //   var endpoint = this.$kytos_server_api + "kytos/flow_manager/v2/flows/" + dpid
     //   var self = this
     //   window.d3.json(endpoint, function(error, result) {
     //     self.flows = result[dpid].flows
     //   })
     // }
   },
   mounted () {
     console.log('mounted')
     // this.update_switch_content()
   },
   // watch: {
   //   content () {
   //     if (this.content) {
   //       this.update_switch_content()
   //     }
   //   }
   // }
 }
</script>

<style lang='css'>
.editor {
  width: 90%;
  overflow: auto;
  word-break: break-all;
  resize: none;
}

</style>