start: preamble program

preamble: declaration*

declaration: _NEWLINE -> empty
             | symbol "=" stream_attribute _NEWLINE -> sa_dec
             | symbol "=" network_state _NEWLINE -> ns_dec
             | symbol "=" way_point _NEWLINE -> wp_dec
             | symbol "=" expr _NEWLINE -> expr_dec
stream_attribute: "StreamAttribute" "(" STRING "," STRING "," STRING ")"
                  | "StreamAttribute.load" "(" STRING "," STRING ")"
network_state: "NetworkState" "(" STRING "," STRING "," STRING ")"
               | "NetworkState.load" "(" STRING "," STRING ")"
way_point: "WayPoint(role='" STRING "')"

program: "program" statements

statements: "{" statement+ "}"

statement: _NEWLINE -> empty
           | symbol "=" expr _NEWLINE -> expr_ins
           | "if" condition statements "else" statements -> two_way_branch
           | "if" condition statements "else" statements "unknown" statements -> three_way_branch
           | "iff" condition statements "else" statements -> fallback_branch
           | "bind" "(" pkt "," expr ")" -> binding
           | "drop" "(" pkt ")" -> drop
           | statements

pkt: "pkt" -> forward
     | "~pkt" -> reverse

condition: "(" expr ")"

expr: expr binary_op expr -> bin_expr
      | unary_op expr -> uni_expr
      | value -> v_expr
      | "pkt." symbol -> sa_expr
      | symbol -> s_expr
      | symbol "()" -> f_expr0
      | symbol "(" args ["," kwargs] ")" -> f_expr1
      | symbol "(" kwargs ")" -> f_expr2
      | "(" expr ")" -> wrap
      | expr "where" expr -> sl_expr

binary_op: "==" -> equal
           | "!=" -> not_equal
           | "&&" -> sand
           | "||" -> sor
           | "|" -> or
           | "&" -> and
           | "+" -> add
           | "-" -> subtract
           | ">" -> gt
           | "<" -> lt
           | ">=" -> gte
           | "<=" -> lte
           | ">>" -> preference
           | "*-*" -> uni_sym
           | "*<*" -> uni_asym
           | ":-:" -> bi_sym
           | ":<:" -> r_asym
           | ":>:" -> l_asym
           | ":=:" -> bi_asym
unary_op: "!" -> not
          | "~" -> inversion
          | "*" -> any

symbol: WORD
args: expr ("," expr)*
kwargs: symbol "=" expr ("," symbol "=" expr)*

value: NUMBER -> numeric
       | STRING -> string
       | BOOLEAN -> boolean

BOOLEAN: "true" | "false" | "unknown"

%import common (WORD, NUMBER)
%import common.ESCAPED_STRING -> STRING
%import common (WS, WS_INLINE)

COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+

%ignore WS
%ignore WS_INLINE
%ignore COMMENT
